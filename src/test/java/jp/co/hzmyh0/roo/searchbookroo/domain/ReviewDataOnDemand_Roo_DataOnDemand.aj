// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package jp.co.hzmyh0.roo.searchbookroo.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import jp.co.hzmyh0.roo.searchbookroo.domain.Review;
import org.springframework.stereotype.Component;

privileged aspect ReviewDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ReviewDataOnDemand: @Component;
    
    private Random ReviewDataOnDemand.rnd = new SecureRandom();
    
    private List<Review> ReviewDataOnDemand.data;
    
    public Review ReviewDataOnDemand.getNewTransientReview(int index) {
        Review obj = new Review();
        setReviewer(obj, index);
        setScore(obj, index);
        setText(obj, index);
        return obj;
    }
    
    public void ReviewDataOnDemand.setReviewer(Review obj, int index) {
        String reviewer = "reviewer_" + index;
        obj.setReviewer(reviewer);
    }
    
    public void ReviewDataOnDemand.setScore(Review obj, int index) {
        int score = 0;
        obj.setScore(score);
    }
    
    public void ReviewDataOnDemand.setText(Review obj, int index) {
        String text = "text_" + index;
        obj.setText(text);
    }
    
    public Review ReviewDataOnDemand.getSpecificReview(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Review obj = data.get(index);
        return Review.findReview(obj.getId());
    }
    
    public Review ReviewDataOnDemand.getRandomReview() {
        init();
        Review obj = data.get(rnd.nextInt(data.size()));
        return Review.findReview(obj.getId());
    }
    
    public boolean ReviewDataOnDemand.modifyReview(Review obj) {
        return false;
    }
    
    public void ReviewDataOnDemand.init() {
        data = Review.findReviewEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Review' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<jp.co.hzmyh0.roo.searchbookroo.domain.Review>();
        for (int i = 0; i < 10; i++) {
            Review obj = getNewTransientReview(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
